{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMgK6uBsLhzw2eA4j2uHrzR"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "roLi-j7kdItp"
      },
      "outputs": [],
      "source": [
        "class Node:\n",
        "    def __init__(self, data=None, prev=None, next=None):\n",
        "        self.data = data\n",
        "        self.prev = prev\n",
        "        self.next = next\n",
        "\n",
        "class DoubleLinkedList:\n",
        "    def __init__(self):\n",
        "        self.head = None\n",
        "        self.tail = None\n",
        "\n",
        "    def append(self, data):\n",
        "        new_node = Node(data, None, None)\n",
        "        if self.head is None:\n",
        "            self.head = new_node\n",
        "            self.tail = new_node\n",
        "        else:\n",
        "            new_node.prev = self.tail\n",
        "            new_node.next = None\n",
        "            self.tail.next = new_node\n",
        "            self.tail = new_node\n",
        "\n",
        "    def prepend(self, data):\n",
        "        new_node = Node(data, None, None)\n",
        "        if self.head is None:\n",
        "            self.head = new_node\n",
        "            self.tail = new_node\n",
        "        else:\n",
        "            new_node.next = self.head\n",
        "            self.head.prev = new_node\n",
        "            self.head = new_node\n",
        "\n",
        "    def delete(self, data):\n",
        "        current_node = self.head\n",
        "        while current_node is not None:\n",
        "            if current_node.data == data:\n",
        "                if current_node.prev is not None:\n",
        "                    current_node.prev.next = current_node.next\n",
        "                    current_node.next.prev = current_node.prev\n",
        "                else:\n",
        "                    self.head = current_node.next\n",
        "                    current_node.next.prev = None\n",
        "                break\n",
        "            current_node = current_node.next\n",
        "\n",
        "    def display(self):\n",
        "        elements = []\n",
        "        current_node = self.head\n",
        "        while current_node is not None:\n",
        "            elements.append(current_node.data)\n",
        "            current_node = current_node.next\n",
        "        print(elements)\n",
        "\n",
        "dl_list = DoubleLinkedList()\n",
        "\n",
        "while True:\n",
        "    print(\"Menu:\")\n",
        "    print(\"1. Append an element\")\n",
        "    print(\"2. Prepend an element\")\n",
        "    print(\"3. Delete an element\")\n",
        "    print(\"4. Display the list\")\n",
        "    print(\"5. Exit\")\n",
        "\n",
        "    choice = int(input(\"Enter your choice: \"))\n",
        "\n",
        "    if choice == 1:\n",
        "        data = input(\"Enter the element to append: \")\n",
        "        dl_list.append(data)\n",
        "    elif choice == 2:\n",
        "        data = input(\"Enter the element to prepend: \")\n",
        "        dl_list.prepend(data)\n",
        "    elif choice == 3:\n",
        "        data = input(\"Enter the element to delete: \")\n",
        "        dl_list.delete(data)\n",
        "    elif choice == 4:\n",
        "        dl_list.display()\n",
        "    elif choice == 5:\n",
        "        break\n",
        "    else:\n",
        "        print(\"Invalid choice\")"
      ]
    }
  ]
}