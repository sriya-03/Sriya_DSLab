{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNiPIomdmiVyB4VRKAO6vJu"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "class Node:\n",
        "    def __init__(self, data):\n",
        "        self.data = data\n",
        "        self.left = None\n",
        "        self.right = None\n",
        "\n",
        "class BinaryTree:\n",
        "    def __init__(self):\n",
        "        self.root = None\n",
        "\n",
        "    def insert(self, data):\n",
        "        new_node = Node(data)\n",
        "        if self.root is None:\n",
        "            self.root = new_node\n",
        "        else:\n",
        "            current = self.root\n",
        "            while True:\n",
        "                if data < current.data:\n",
        "                    if current.left is None:\n",
        "                        current.left = new_node\n",
        "                        break\n",
        "                    else:\n",
        "                        current = current.left\n",
        "                else:\n",
        "                    if current.right is None:\n",
        "                        current.right = new_node\n",
        "                        break\n",
        "                    else:\n",
        "                        current = current.right\n",
        "\n",
        "    def search(self, data):\n",
        "        current = self.root\n",
        "        while current is not None:\n",
        "            if current.data == data:\n",
        "                return True\n",
        "            elif data < current.data:\n",
        "                current = current.left\n",
        "            else:\n",
        "                current = current.right\n",
        "        return False\n",
        "\n",
        "    def delete(self, data):\n",
        "        current = self.root\n",
        "        parent = None\n",
        "        while current is not None and current.data != data:\n",
        "            parent = current\n",
        "            if data < current.data:\n",
        "                current = current.left\n",
        "            else:\n",
        "                current = current.right\n",
        "        if current is None:\n",
        "            return False\n",
        "\n",
        "        if current.left is None and current.right is None:\n",
        "            if parent is None:\n",
        "                self.root = None\n",
        "            elif parent.left == current:\n",
        "                parent.left = None\n",
        "            else:\n",
        "                parent.right = None\n",
        "        elif current.right is None:\n",
        "            if parent is None:\n",
        "                self.root = current.left\n",
        "            elif parent.left == current:\n",
        "                parent.left = current.left\n",
        "            else:\n",
        "                parent.right = current.left\n",
        "        elif current.left is None:\n",
        "            if parent is None:\n",
        "                self.root = current.right\n",
        "            elif parent.left == current:\n",
        "                parent.left = current.right\n",
        "            else:\n",
        "                parent.right = current.right\n",
        "        else:\n",
        "            successor = current.right\n",
        "            while successor.left is not None:\n",
        "                successor = successor.left\n",
        "            current.data = successor.data\n",
        "            self.delete(successor.data)\n",
        "\n",
        "        return True\n",
        "    \n",
        "    def inorder(self, node):\n",
        "        if node is not None:\n",
        "            self.inorder(node.left)\n",
        "            print(node.data, end=' ')\n",
        "            self.inorder(node.right)\n",
        "\n",
        "    def postorder(self, node):\n",
        "        if node is not None:\n",
        "            self.postorder(node.left)\n",
        "            self.postorder(node.right)\n",
        "            print(node.data, end=' ')\n",
        "\n",
        "    def preorder(self, node):\n",
        "        if node is not None:\n",
        "            print(node.data, end=' ')\n",
        "            self.preorder(node.left)\n",
        "            self.preorder(node.right)\n",
        "\n",
        "def main():\n",
        "    tree = BinaryTree()\n",
        "    while True:\n",
        "        print(\"1. Insert a value\")\n",
        "        print(\"2. Search for a value\")\n",
        "        print(\"3. Delete a value\")\n",
        "        print(\"4. Inorder traversal\")\n",
        "        print(\"5. Postorder traversal\")\n",
        "        print(\"6. Preorder traversal\")\n",
        "        print(\"7. Quit\")\n",
        "        choice = int(input(\"Enter your choice: \"))\n",
        "        if choice == 1:\n",
        "            value = int(input(\"Enter the value to insert: \"))\n",
        "            tree.insert(value)\n",
        "        elif choice ==2:\n",
        "            value = int(input(\"Enter the value to search: \"))\n",
        "            if tree.search(value)==False:\n",
        "                print(\"Element not present\")\n",
        "            else: \n",
        "                print(\"Element present\")\n",
        "            \n",
        "        elif choice ==3:\n",
        "            value = int(input(\"Enter the value which you want to delete: \"))\n",
        "            tree.delete(value)\n",
        "        elif choice == 4:\n",
        "            tree.inorder(tree.root)\n",
        "            print()\n",
        "        elif choice == 5:\n",
        "            tree.postorder(tree.root)\n",
        "            print()\n",
        "        elif choice == 6:\n",
        "            tree.preorder(tree.root)\n",
        "            print()\n",
        "        elif choice==7:\n",
        "            break;\n",
        "if __name__ == '__main__':\n",
        "    main()"
      ],
      "metadata": {
        "id": "CLzE_TmDE_qh"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}